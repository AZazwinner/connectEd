/* src/sections/Mission.css */

.mission-section {
  box-sizing: border-box;
  width: 100%;
  
  /* Use flexbox to center the main wrapper */
  display: flex;
  justify-content: center;
  align-items: center;
  
  padding: 4rem 2rem;
  background: linear-gradient(to right, #ffffff, #e8ffe5);
}

/* 
  The most important container. It has a max-width and uses flexbox 
  to create the two columns. This is what "sticks them together".
*/
.mission-wrapper {
  display: flex;
  align-items: center; /* Vertically aligns the content */
  gap: 3rem;           /* The space between the image and the text */
  width: 100%;
  max-width: 1100px;   /* Set a max width for the entire content block */
}


/* ---- Column 1: The Image ---- */
.mission-image-container {
  /*
    Use flex-basis to control the size in relation to the text column.
    It will take up 40% of the space but not grow.
  */
  flex: 0 0 40%;
  
  /* Use max-width to set a hard limit on its size */
  max-width: 400px;
  
  /* Ensure it becomes a responsive circle */
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  overflow: hidden;
  margin: 0; /* Reset mobile margin */
}


.mission-image-container img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}


/* ---- Column 2: The Text ---- */
.mission-text-content {
  flex: 1; /* Takes up the remaining space */
  text-align: right; /* Keeps the text right-aligned as you requested */
  
  /* The decorative border from the previous step now applies to just this column */
  border-right: 4px solid #a6e095;
  padding-right: 3rem;
}

.mission-heading {
  font-family: Georgia, serif;
  font-size: 2.8rem;
  font-weight: 500;
  color: #111827;
  margin-bottom: 2rem;
}

.mission-paragraph {
  font-size: 1.25rem;
  line-height: 1.7;
  color: #4b5563;
}

@media (max-width: 1024px) {
  /* This part is the same: stack the main items vertically */
  .mission-wrapper {
    flex-direction: column;
    gap: 2rem;
  }

  .mission-image-container {
    width: 280px;  /* Give it a fixed, predictable width */
    height: 280px; /* And an IDENTICAL fixed height to make a perfect square */
    margin: 0 auto;  /* Center the container */

    /* The two properties that make it a circular window */
    border-radius: 50%;
    overflow: hidden; /* This is CRUCIAL: it clips the image to the circle's shape */
  }

  /* 
    Step 2: Style the IMAGE that lives inside the container.
  */
  .mission-image-container img {
    width: 100%; /* Make the image fill the full width of its container */
    height: 100%; /* Make it fill the full height */
    
    /* 
      This is the final magic piece. 'object-fit' is like 'background-size' but for img tags.
      'cover' will make the image fill the entire space without stretching or squashing.
      It intelligently crops a little from the sides if needed, but the result is a
      perfectly proportioned image inside a perfect circle.
    */
    object-fit: cover; 
  }


  /* ... your existing text and heading styles for mobile ... */
  .mission-text-content {
    text-align: center;
    border-right: none;
    padding-right: 0;
    border-top: 3px solid #dbffc8;
    padding-top: 2rem;
  }
  .mission-heading { font-size: 2.2rem; }
  .mission-paragraph { font-size: 1rem; }
}